Hi, we made a 3D multiplayer game called Deviant3D

We are implementing some of the physics, lighting, and shading systems that we learned in the class. The game is developed using Godot and the starting point of the game was the basic world, character, and movement system.

Calvin ---------------------------------------------------------------

Responsive UI
Physics/Underwater physics
Flying enemies
Procedural terrain (land and asteroids), 
worm, 
animation, 
customizable graphics/controls



Sambodh ---------------------------------------------------------------
To implement, we made custom physics logic for the player, worm, and other objects using Verlet integration.

We had various shaders, such as the sketch outline, which was done by creating a new offset mesh, then using noise to turn on and off certain segments. 

We did procedural animation, by interpolating and tweening rotations and positions, and particularly for the worm it uses a follow the leader algorithm, where the head is the unconstrained leader. 

We did procedural terrain by starting with a 2D grid and offsetting positions, then using those points to create cubes (technically wise, we had to implement our own cuboid generation).

Rafael ---------------------------------------------------------------

For multiplayer, the engine physics are nondeterministic, so it was very hard to sync.
So, verlet integration made it far more deterministic, and a random number generator with synced seed allowed consistent randomness.

We also made power ups that have various effects when the player collides with them.


Calvin ---------------------------------------------------------------
water shader, 
outline shader,
zooming changes FOV
tweens/bezier curves for animation, switch to FPS cam
There’s not enough time to demo multiplayer, but we have a gif of it in conclusion







So after project 4 we decided to make something physics based, and I had experience
with networking in the Godot game engine, so we made a multiplayer game.

Godot took care of collision testing and basic rendering, so we jumped right in, 

So, coming at ya live from channel 184:

We got Mr. Bean here flipping around,
but wait, it's a lil ugly, lets turn up
those graphics, in real time.

Now we can see the glorious procedurally
generated terrain and water shaders,
as well as the worm and other stuff.
So lets get into the technical details!
FEATURES:
Responsive UI
Flying enemies, player - verlet integration
Procedural terrain (land and asteroids), 
worm, 
Flip-dee-doo
Underwater physics,
animation (gun, grappling), 
customizable graphics/controls


water shader, 
outline shader,
zooming changes FOV
tweens/curves for animation, switch to FPS cam (cubic curve)
crouching - Mr Bean is happy with the results

There’s not enough time to demo multiplayer, but we have a gif of it in conclusion,
and everything except the worm and underwater physics is fully multiplayer compatible.


TO ADD:
More procedural animations, good toon shader
edge detection
rocket jumped
slicing objects
https://berkeley.zoom.us/my/markz
https://berkeley.zoom.us/my/kanazawa
